/*
 * Copyright (c) 2007, Swedish Institute of Computer Science.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

/**
 * \file
 *         Best-effort single-hop unicast example
 * \author
 *         Adam Dunkels <adam@sics.se>
 */

#include "contiki.h"
#include "net/rime/rime.h"
#include <stdio.h>
#include "dev/button-sensor.h"
#include "clock.c"


/*---------------------------------------------------------------------------*/
PROCESS(example_unicast_process, "Example unicast");
AUTOSTART_PROCESSES(&example_unicast_process);
/*---------------------------------------------------------------------------*/

struct Message
{
    int id;
    int totalPackets;
    char m;
    int packetNumber;
//    int alarm;

};
/*---------------------------------------------------------------------------*/




/*---------------------------------------------------------------------------*/
static void
recv_uc(struct unicast_conn *c, const linkaddr_t *from)
{
  printf("unicast message received from %d.%d\n",
	 from->u8[0], from->u8[1]);
}
/*---------------------------------------------------------------------------*/
static void
sent_uc(struct unicast_conn *c, int status, int num_tx)
{
  const linkaddr_t *dest = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);
  if(linkaddr_cmp(dest, &linkaddr_null)) {
    return;
  }
  // printf("unicast message sent to %d.%d: status %d num_tx %d\n",
  //   dest->u8[0], dest->u8[1], status, num_tx);
}
/*---------------------------------------------------------------------------*/
static const struct unicast_callbacks unicast_callbacks = {recv_uc, sent_uc};
static struct unicast_conn uc;
/*---------------------------------------------------------------------------*/
//the data structure used for sender log data
int senderLog[40];  //index accessed by j.
static int j=0 ;
static int packet_sent_count=0;

/*---------------------------------------------------------------------------*/

PROCESS_THREAD(example_unicast_process, ev, data)
{
  PROCESS_EXITHANDLER(unicast_close(&uc);)

  PROCESS_BEGIN();

  SENSORS_ACTIVATE(button_sensor);

  unicast_open(&uc, 146, &unicast_callbacks);

  static struct Message msg;
  static struct Message check[40];
  msg.totalPackets = 40;
  msg.id = 001; 
  static int i = 1;




  while (i <= msg.totalPackets)
  {
  	 
      // PROCESS_WAIT_EVENT_UNTIL(ev == sensors_event && data == &button_sensor);
      static struct etimer et;
      etimer_set(&et, CLOCK_SECOND);

      PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));


      linkaddr_t addr;
      // msg.requestType = 1;
      msg.m = 'x';
      msg.packetNumber = i;
      check[i-1] = msg;
      packetbuf_copyfrom(&msg, sizeof(msg));
      addr.u8[0] = 2;
      addr.u8[1] = 0;



      if (!linkaddr_cmp(&addr, &linkaddr_node_addr))
      {
          printf("Sending Message to %d.%d, Packet Number:%d\n",addr.u8[0], addr.u8[1],i);
          unicast_send(&uc, &addr);
          senderLog[j]=i;
          j++;
          packet_sent_count++;
          //long time= CLOCK_SECOND();

      }
      i = i + 1;
  }

  printf( "**********Total Packet Count Sent  TPCS: %d**************\n", packet_sent_count) ;

// int a = 0;
//   while ( a < 11 )
//   {
//             printf( "%d\n", senderLog[a]) ;
//             a++;
//         }

  PROCESS_END();
}
