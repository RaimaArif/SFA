/*
 * Copyright (c) 2007, Swedish Institute of Computer Science.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

/**
 * \file
 *         Best-effort single-hop unicast example
 * \author
 *         Adam Dunkels <adam@sics.se>
 */
/////////////////////////////////Malicious Node///////////////////////////////////////////////////////
#include "contiki.h"
#include "net/rime/rime.h"
#include <stdio.h>
#include "dev/button-sensor.h"

/*---------------------------------------------------------------------------*/
PROCESS(example_unicast_process, "Example unicast");
AUTOSTART_PROCESSES(&example_unicast_process);
/*---------------------------------------------------------------------------*/



struct Message
{
    int id;
    int totalPackets;
    char m;
    int packetNumber;
    //int alarm;
};


int static prev_time=0;
int static time=0;
int static firstpack=1;

/*-----------------

/*---------------------------------------------------------------------------*/

void detect(int prev_time, int time)
{
  int delay=time-prev_time;
  if(delay>128)
  {
    printf("******************Alarm generated!!!*********************** \n");
  }


}
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
static void
sent_uc(struct unicast_conn *c, int status, int num_tx)
{
  const linkaddr_t *dest = packetbuf_addr(PACKETBUF_ADDR_RECEIVER);
  if(linkaddr_cmp(dest, &linkaddr_null)) {
    return;
  }
  printf("unicast message sent to %d.%d: status %d num_tx %d\n",
    dest->u8[0], dest->u8[1], status, num_tx);
}
/*---------------------------------------------------------------------------*/
static void
recv_uc(struct unicast_conn *c, const linkaddr_t *from)
{
    static struct Message msg;
    static struct Message check[40];
    static int packetCounter = 0;
      printf("unicast message received from %d.%d\n",
         from->u8[0], from->u8[1]);
      
      
            time= clock_time();
            
            
            if (firstpack == 0)
            {
              detect(time,prev_time);
            }
            firstpack=0;
        prev_time=time;
         printf("Packet Receiving Time: Clock Time  %d \n",time );
     packetbuf_copyto(&msg);

     if(msg.id == 001)
     {
         printf("Packet Number:%d\n",msg.packetNumber);
         check[packetCounter] = msg;
         packetCounter = packetCounter+1;
     }

     // if(packetCounter == msg.totalPackets)
     // {
     //     printf("*****************All packets received*************************\n");
     // }

     // send_msg()

      
     static const struct unicast_callbacks unicast_callbacks_1 = {sent_uc};
     static struct unicast_conn uc_1;
     unicast_open(&uc_1, 146, &unicast_callbacks_1);

     linkaddr_t addr;
     // msg.requestType = 1;
     // char msg = 'x';
     packetbuf_copyfrom(&msg, sizeof(msg));
     addr.u8[0] = 4;
     addr.u8[1] = 0;
     if (!linkaddr_cmp(&addr, &linkaddr_node_addr))
     {
         printf("Sending Message to %d.%d, Packet Number:%d\n",addr.u8[0], addr.u8[1],msg.packetNumber);
         unicast_send(&uc_1, &addr);
     }
   
}

/*---------------------------------------------------------------------------*/
static const struct unicast_callbacks unicast_callbacks = {recv_uc, sent_uc};
static struct unicast_conn uc;
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(example_unicast_process, ev, data)
{
  PROCESS_EXITHANDLER(unicast_close(&uc);)

  PROCESS_BEGIN();

  SENSORS_ACTIVATE(button_sensor);
  unicast_open(&uc, 148, &unicast_callbacks);

  PROCESS_END();
}
